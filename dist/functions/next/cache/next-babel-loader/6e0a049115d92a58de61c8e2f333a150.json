{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport './timer.css'; // function component\n\nconst StaticCard = ({\n  position,\n  digit\n}) => {\n  return __jsx(\"div\", {\n    className: position\n  }, __jsx(\"span\", null, digit));\n}; // function component\n\n\nconst NormalUnitContainer = ({\n  digit,\n  unit = 'time',\n  countdown\n}) => {\n  // assign digit values\n  let currentDigit = digit;\n  let previousDigit;\n\n  if (countdown) {\n    previousDigit = digit + 1; // to prevent a negative value\n\n    if (unit !== 'hours') {\n      previousDigit = previousDigit === 60 ? 59 : previousDigit;\n    } else {\n      previousDigit = previousDigit === 24 ? 23 : previousDigit;\n    }\n  } // add zero\n\n\n  if (currentDigit < 10) {\n    currentDigit = `0${currentDigit}`;\n  }\n\n  if (previousDigit < 10) {\n    previousDigit = `0${previousDigit}`;\n  }\n\n  return __jsx(\"div\", {\n    className: 'NormalUnitContainer'\n  }, __jsx(StaticCard, {\n    position: 'NormalupperCard',\n    digit: currentDigit\n  }), __jsx(\"div\", {\n    className: \"digitLabel\"\n  }, __jsx(\"label\", null, unit)));\n};\n\nfunction getTimeRemaining(endtime) {\n  let t = Date.parse(endtime) - Date.parse(new Date());\n  let days = Math.floor(t / (1000 * 60 * 60 * 24));\n  let hours = Math.floor(t / (1000 * 60 * 60) % 24);\n  let minutes = Math.floor(t / 1000 / 60 % 60);\n  let seconds = Math.floor(t / 1000 % 60);\n  return {\n    time: t,\n    days,\n    hours,\n    minutes,\n    seconds\n  };\n} // class component\n\n\nclass NormalClock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateTime(), 50);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateTime() {\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(this.props.countdown);\n\n    if (days !== this.state.days) {\n      this.setState({\n        days\n      });\n    } // on hour chanage, update hours and shuffle state\n\n\n    if (hours !== this.state.hours) {\n      this.setState({\n        hours\n      });\n    } // on minute chanage, update minutes and shuffle state\n\n\n    if (minutes !== this.state.minutes) {\n      this.setState({\n        minutes\n      });\n    } // on second chanage, update seconds and shuffle state\n\n\n    if (seconds !== this.state.seconds) {\n      this.setState({\n        seconds\n      });\n    }\n  }\n\n  render() {\n    // state object destructuring\n    const {\n      days,\n      hours,\n      minutes,\n      seconds\n    } = this.state;\n    const {\n      countdown,\n      divider\n    } = this.props;\n    return __jsx(\"div\", {\n      className: 'NormalClock'\n    }, __jsx(NormalUnitContainer, {\n      countdown: countdown,\n      unit: 'days',\n      digit: days\n    }), divider ? __jsx(\"span\", {\n      className: \"dividerColon\"\n    }, \":\") : '', __jsx(NormalUnitContainer, {\n      countdown: countdown,\n      unit: 'hours',\n      digit: hours\n    }), divider ? __jsx(\"span\", {\n      className: \"dividerColon\"\n    }, \":\") : '', __jsx(NormalUnitContainer, {\n      countdown: countdown,\n      unit: 'minutes',\n      digit: minutes\n    }), divider ? __jsx(\"span\", {\n      className: \"dividerColon\"\n    }, \":\") : '', __jsx(NormalUnitContainer, {\n      countdown: countdown,\n      unit: 'seconds',\n      digit: seconds\n    }));\n  }\n\n}\n\nexport default NormalClock;","map":null,"metadata":{},"sourceType":"module"}