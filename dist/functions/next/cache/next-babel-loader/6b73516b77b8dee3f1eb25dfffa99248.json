{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport './timer.css'; // function component\n\nvar StaticCard = function StaticCard(_ref) {\n  var position = _ref.position,\n      digit = _ref.digit;\n  return __jsx(\"div\", {\n    className: position\n  }, __jsx(\"span\", null, digit));\n}; // function component\n\n\nvar NormalUnitContainer = function NormalUnitContainer(_ref2) {\n  var digit = _ref2.digit,\n      _ref2$unit = _ref2.unit,\n      unit = _ref2$unit === void 0 ? 'time' : _ref2$unit,\n      countdown = _ref2.countdown;\n  // assign digit values\n  var currentDigit = digit;\n  var previousDigit;\n\n  if (countdown) {\n    previousDigit = digit + 1; // to prevent a negative value\n\n    if (unit !== 'hours') {\n      previousDigit = previousDigit === 60 ? 59 : previousDigit;\n    } else {\n      previousDigit = previousDigit === 24 ? 23 : previousDigit;\n    }\n  } // add zero\n\n\n  if (currentDigit < 10) {\n    currentDigit = \"0\".concat(currentDigit);\n  }\n\n  if (previousDigit < 10) {\n    previousDigit = \"0\".concat(previousDigit);\n  }\n\n  return __jsx(\"div\", {\n    className: 'NormalUnitContainer'\n  }, __jsx(StaticCard, {\n    position: 'NormalupperCard',\n    digit: currentDigit\n  }), __jsx(\"div\", {\n    className: \"digitLabel\"\n  }, __jsx(\"label\", null, unit)));\n};\n\nfunction getTimeRemaining(endtime) {\n  var t = Date.parse(endtime) - Date.parse(new Date());\n  var days = Math.floor(t / (1000 * 60 * 60 * 24));\n  var hours = Math.floor(t / (1000 * 60 * 60) % 24);\n  var minutes = Math.floor(t / 1000 / 60 % 60);\n  var seconds = Math.floor(t / 1000 % 60);\n  return {\n    time: t,\n    days: days,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds\n  };\n} // class component\n\n\nvar NormalClock = /*#__PURE__*/function (_React$Component) {\n  _inherits(NormalClock, _React$Component);\n\n  var _super = _createSuper(NormalClock);\n\n  function NormalClock(props) {\n    var _this;\n\n    _classCallCheck(this, NormalClock);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n    return _this;\n  }\n\n  _createClass(NormalClock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.timerID = setInterval(function () {\n        return _this2.updateTime();\n      }, 50);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime() {\n      var _getTimeRemaining = getTimeRemaining(this.props.countdown),\n          days = _getTimeRemaining.days,\n          hours = _getTimeRemaining.hours,\n          minutes = _getTimeRemaining.minutes,\n          seconds = _getTimeRemaining.seconds;\n\n      if (days !== this.state.days) {\n        this.setState({\n          days: days\n        });\n      } // on hour chanage, update hours and shuffle state\n\n\n      if (hours !== this.state.hours) {\n        this.setState({\n          hours: hours\n        });\n      } // on minute chanage, update minutes and shuffle state\n\n\n      if (minutes !== this.state.minutes) {\n        this.setState({\n          minutes: minutes\n        });\n      } // on second chanage, update seconds and shuffle state\n\n\n      if (seconds !== this.state.seconds) {\n        this.setState({\n          seconds: seconds\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // state object destructuring\n      var _this$state = this.state,\n          days = _this$state.days,\n          hours = _this$state.hours,\n          minutes = _this$state.minutes,\n          seconds = _this$state.seconds;\n      var _this$props = this.props,\n          countdown = _this$props.countdown,\n          divider = _this$props.divider;\n      return __jsx(\"div\", {\n        className: 'NormalClock'\n      }, __jsx(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'days',\n        digit: days\n      }), divider ? __jsx(\"span\", {\n        className: \"dividerColon\"\n      }, \":\") : '', __jsx(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'hours',\n        digit: hours\n      }), divider ? __jsx(\"span\", {\n        className: \"dividerColon\"\n      }, \":\") : '', __jsx(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'minutes',\n        digit: minutes\n      }), divider ? __jsx(\"span\", {\n        className: \"dividerColon\"\n      }, \":\") : '', __jsx(NormalUnitContainer, {\n        countdown: countdown,\n        unit: 'seconds',\n        digit: seconds\n      }));\n    }\n  }]);\n\n  return NormalClock;\n}(React.Component);\n\nexport default NormalClock;","map":null,"metadata":{},"sourceType":"module"}