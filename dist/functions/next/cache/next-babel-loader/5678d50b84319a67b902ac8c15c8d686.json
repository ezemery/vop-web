{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Fragment } from 'react';\nimport FeatureBlockWrapper, { IconWrapper, ContentWrapper, ButtonWrapper } from './featureBlock.style';\n\nconst FeatureBlock = (_ref) => {\n  let {\n    className,\n    icon,\n    title,\n    button,\n    description,\n    iconPosition,\n    additionalContent,\n    wrapperStyle,\n    iconStyle,\n    contentStyle,\n    btnWrapperStyle\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"icon\", \"title\", \"button\", \"description\", \"iconPosition\", \"additionalContent\", \"wrapperStyle\", \"iconStyle\", \"contentStyle\", \"btnWrapperStyle\"]);\n\n  // Add all classs to an array\n  const addAllClasses = ['feature__block']; // Add icon position class\n\n  if (iconPosition) {\n    addAllClasses.push(`icon_${iconPosition}`);\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // check icon value and add\n\n\n  const Icon = icon && __jsx(IconWrapper, _extends({\n    className: \"icon__wrapper\"\n  }, iconStyle), icon);\n\n  return __jsx(FeatureBlockWrapper, _extends({\n    className: addAllClasses.join(' ')\n  }, wrapperStyle, props), Icon, title || description || button ? __jsx(Fragment, null, __jsx(ContentWrapper, _extends({\n    className: \"content__wrapper\"\n  }, contentStyle), title, description, button && __jsx(ButtonWrapper, _extends({\n    className: \"button__wrapper\"\n  }, btnWrapperStyle), button)), additionalContent) : '');\n};\n\nFeatureBlock.defaultProps = {\n  iconPosition: 'top'\n};\nexport default FeatureBlock;","map":null,"metadata":{},"sourceType":"module"}