{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport InputField, { EyeButton } from './input.style';\n\nconst Input = (_ref) => {\n  let {\n    label,\n    value,\n    onBlur,\n    onFocus,\n    onChange,\n    inputType,\n    isMaterial,\n    icon,\n    iconPosition,\n    passwordShowHide,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"onBlur\", \"onFocus\", \"onChange\", \"inputType\", \"isMaterial\", \"icon\", \"iconPosition\", \"passwordShowHide\", \"className\"]);\n\n  // use toggle hooks\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    toggle: false,\n    focus: false,\n    value: ''\n  }); // toggle function\n\n  const handleToggle = () => {\n    setState(_objectSpread({}, state, {\n      toggle: !state.toggle\n    }));\n  }; // add focus class\n\n\n  const handleOnFocus = event => {\n    setState(_objectSpread({}, state, {\n      focus: true\n    }));\n    onFocus(event);\n  }; // remove focus class\n\n\n  const handleOnBlur = event => {\n    setState(_objectSpread({}, state, {\n      focus: false\n    }));\n    onBlur(event);\n  }; // handle input value\n\n\n  const handleOnChange = event => {\n    setState(_objectSpread({}, state, {\n      value: event.target.value\n    }));\n    onChange(event.target.value);\n  }; // get input focus class\n\n\n  const getInputFocusClass = () => {\n    if (state.focus === true || state.value !== '') {\n      return 'is-focus';\n    } else {\n      return '';\n    }\n  }; // init variable\n\n\n  let inputElement, htmlFor; // Add all classs to an array\n\n  const addAllClasses = ['reusecore__input']; // Add is-material class\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // Add icon position class if input element has icon\n\n\n  if (icon && iconPosition) {\n    addAllClasses.push(`icon-${iconPosition}`);\n  } // Add new class\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // if lable is not empty\n\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // Label position\n\n\n  const LabelPosition = isMaterial === true ? 'bottom' : 'top'; // Label field\n\n  const LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor\n  }, label); // Input type check\n\n\n  switch (inputType) {\n    case 'textarea':\n      inputElement = __jsx(\"textarea\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus\n      }));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\"\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: state.toggle ? 'password' : 'text',\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus\n      })), passwordShowHide && __jsx(EyeButton, {\n        onClick: handleToggle,\n        className: state.toggle ? 'eye' : 'eye-closed'\n      }, __jsx(\"span\", null)));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"field-wrapper\"\n      }, __jsx(\"input\", _extends({}, props, {\n        id: htmlFor,\n        name: htmlFor,\n        type: inputType,\n        value: state.value,\n        onChange: handleOnChange,\n        onBlur: handleOnBlur,\n        onFocus: handleOnFocus\n      })), icon && __jsx(\"span\", {\n        className: \"input-icon\"\n      }, icon));\n  }\n\n  return __jsx(InputField, {\n    className: `${addAllClasses.join(' ')} ${getInputFocusClass()}`\n  }, LabelPosition === 'top' && LabelField, inputElement, isMaterial && __jsx(\"span\", {\n    className: \"highlight\"\n  }), LabelPosition === 'bottom' && LabelField);\n};\n/** Inout prop type checking. */\n\n\n/** Inout default type. */\nInput.defaultProps = {\n  inputType: 'text',\n  isMaterial: false,\n  iconPosition: 'left',\n  onBlur: () => {},\n  onFocus: () => {},\n  onChange: () => {}\n};\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}