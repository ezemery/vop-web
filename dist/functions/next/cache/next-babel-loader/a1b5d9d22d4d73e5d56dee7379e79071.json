{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport SelectStyle from './select.style';\n\nconst Select = (_ref) => {\n  let {\n    className,\n    labelText,\n    labelPosition\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"labelText\", \"labelPosition\"]);\n\n  // Add all classes to an array\n  const addAllClasses = ['reusecore__select']; // Add label position class\n\n  if (labelPosition) {\n    addAllClasses.push(`label_${labelPosition}`);\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  const LabelField = labelText && __jsx(\"span\", {\n    className: \"reusecore__field-label\"\n  }, labelText);\n\n  const position = labelPosition || 'top';\n  return __jsx(SelectStyle, {\n    className: addAllClasses.join(' ')\n  }, position === 'left' || position === 'right' || position === 'top' ? LabelField : '', __jsx(ReactSelect, _extends({\n    className: \"select-field__wrapper\",\n    classNamePrefix: \"select\"\n  }, props)), position === 'bottom' && LabelField);\n};\n\nSelect.defaultProps = {\n  as: 'div',\n  labelPosition: 'top'\n};\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}